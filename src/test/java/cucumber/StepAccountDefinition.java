package cucumber;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.example.App;
import com.example.account.AccountEntity;
import com.example.account.AccountRepository;
import com.example.account.AccountService;
import com.example.account.AccountType;
import cucumber.entity.AccountFileEntity;
import io.cucumber.java.After;
import io.cucumber.java.Before;
import io.cucumber.java.DataTableType;
import io.cucumber.java.pt.Dados;
import io.cucumber.java.pt.Entao;
import io.cucumber.java.pt.Quando;
import lombok.extern.slf4j.Slf4j;
import org.assertj.core.api.Assertions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootContextLoader;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;

import java.util.List;
import java.util.Map;

@ActiveProfiles("test")
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)
@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)
@ContextConfiguration(loader = SpringBootContextLoader.class, classes = {App.class})
@Slf4j
public class StepAccountDefinition {

    @Autowired
    protected AccountRepository accountRepository;

    @Autowired
    protected AccountService accountService;

    @Before
    public void setup() {
        log.info("Before");
        accountRepository.deleteAll();
    }

    @After
    public void tearDown() {
        log.info("Finished");
    }

    @DataTableType
    public AccountFileEntity defineAccountFileEntity(Map<String, String> entry) {
        return new AccountFileEntity(entry);
    }

    @Dados("^as contas iniciais:$")
    public void givenAccountFileEntities(final List<AccountFileEntity> accountFileEntities) {
        for (AccountFileEntity accountFileEntity : accountFileEntities) {
            accountRepository.save(accountFileEntity.parseToAccountEntity());
        }
    }

    @Quando("^a conta vira um mes$")
    public void WhenProcessed() throws Exception {
        accountService.executeRule();
    }

    @Entao("^as contas resultantes sao:$")
    public void thenAccountsAreCreated(List<AccountFileEntity> accountFileEntities) {
        for (AccountFileEntity accountFileEntity : accountFileEntities) {
            AccountEntity accountEntity = accountRepository.findByOwner(accountFileEntity.getOwner()).get();
            Assertions.assertThat(accountFileEntity.getOwner()).isEqualTo(accountEntity.getOwner());
            Assertions.assertThat(AccountType.valueOf(accountFileEntity.getType())).isEqualTo(accountEntity.getType());
            Assertions.assertThat(accountFileEntity.getAmount()).isEqualTo(accountEntity.getAmount());
        }

    }

}